'elm_lang@core@Main@-'/2 = fun (_x, _y) ->
	_x
'elm_lang@core@Main@minus'/0 = fun () ->
	apply 'elm_lang@core@Main@-'/2 (3, 4)
'elm_lang@core@Main@minusNegative'/0 = fun () ->
	let <_1> =
		apply 'elm_lang@core@Main@-'/2 (0, 4)
	in
		apply 'elm_lang@core@Main@-'/2 (3, _1)
'elm_lang@core@Main@negativeMinusNegative'/0 = fun () ->
	let <_2> =
		apply 'elm_lang@core@Main@-'/2 (0, 3)
	in
		let <_1> =
			apply 'elm_lang@core@Main@-'/2 (0, 4)
		in
			apply 'elm_lang@core@Main@-'/2 (_2, _1)
'elm_lang@core@Main@negativeInParens'/0 = fun () ->
	apply 'elm_lang@core@Main@-'/2 (0, 2)
'elm_lang@core@Main@funcMinus'/0 = fun () ->
	let <_1> =
		fun (_x, _y) ->
			apply 'elm_lang@core@Main@-'/2 (_x, _y)
	in
		call 'Utils':'apply' (_1, 3, 4)
